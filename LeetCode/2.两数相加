/**两个非空的链表表示两个非负的整数。它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。
将这两个数相加起来，返回一个新的链表来表示它们的和。
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=new ListNode(0);
		int carray=0;
		ListNode p=head;
       
	    while(l1!=null||l2!=null){//这里是或
	    	   ListNode node;
	    	   int x=(l1==null?0:l1.val);
	    	   int y=(l2==null?0:l2.val);
	    	   int z=x+y+carray;

	    	   if(z>9){
	    		   carray=1;//最大进1
	    		   node=new ListNode(z-10);
	    	   }else{
	    		   carray=0;
	    		   node=new ListNode(z);
	    	   }

	    	   p.next=node;
	    	   p=p.next;
	    	   if(l1!=null)//注意l1||l2的下一个或许是null
	    		   l1=l1.next;
	    	   if(l2!=null)
	    		   l2=l2.next;
	    }
	    
	    if(carray>0)//即使遍历完两个链表最后还可能有进位
	    	p.next=new ListNode(carray);
	    
		return head.next;
    }
}