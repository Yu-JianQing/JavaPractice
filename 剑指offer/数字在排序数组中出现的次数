数字在排序数组中出现的次数
用了两遍二分法
public class Solution {
    public int GetNumberOfK(int [] array , int k) {
       if(array==null||k<=0)
           return 0;
        int first=getFirst(array,0,array.length-1,k);
        int last=getLast(array,0,array.length-1,k);
        if(first!=-1&&last!=-1)
            return last-first+1;
        return 0;
    }
    private int getFirst(int array[],int start,int end,int k){
        int first=-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(array[mid]==k){
                first=mid;//覆盖
                end=mid-1;
            }else if(start<=end&&array[mid]>k)
                end=mid-1;
            else
                start=mid+1;
        }
        return first;
    }
    private int getLast(int array[],int start,int end,int k){
        int last=-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(array[mid]==k){
                last=mid;//覆盖
                start=mid+1;
            }else if(start<=end&&array[mid]>k)
                end=mid-1;
            else
                start=mid+1;
        }
        return last;
    }
}