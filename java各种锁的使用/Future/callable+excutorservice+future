//callable+excutorservice+future
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

//提货单callable+excutorservice+future+thread
public class Solution {
	private static int i=0;
	
	static class makeRun implements Callable<String>{
		@Override
		public String call() throws Exception {
			try {
				System.out.println("making cake---");
				Thread.sleep(500);
				i++;
				return "cake"+i;
			} catch (Exception e) {}
			return null;
		}
	}
	
	public static void main(String[] args) {
		try {
			
			ExecutorService service=Executors.newFixedThreadPool(3);
			Future<String> future=service.submit(new makeRun());
			Future<String> future2=service.submit(new makeRun());
			Future<String> future3=service.submit(new makeRun());
			System.out.println(future.get());
			System.out.println(future2.get());
			System.out.println(future3.get());
		} catch (Exception e) {}
	}
	
}
