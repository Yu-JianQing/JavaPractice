//依次打印0与奇偶数
import java.util.concurrent.Semaphore;
import java.util.function.IntConsumer;

class ZeroEvenOdd {
    private int n;
    private Semaphore sp1=new Semaphore(0);
    private Semaphore sp2=new Semaphore(1);
    private Semaphore sp3=new Semaphore(0);
    private Semaphore sp4=new Semaphore(1);
    
    public ZeroEvenOdd(int n) {
        this.n = n;
    }

    // printNumber.accept(x) outputs "x", where x is an integer.
    public void zero(IntConsumer printNumber) throws InterruptedException {
    	for(int i=0;i<=n;i++){
    		sp4.acquire();
    		printNumber.accept(0);
            sp1.release();
    	}
    }

    public void even(IntConsumer printNumber) throws InterruptedException {
        
    	for(int i=0;i<=n;i++){
    		if(!isOdd(i)){
    			sp3.acquire();
    			sp1.acquire();
    			printNumber.accept(i);
    			sp2.release();
    			sp4.release();
    		}
    	}
    	
    }

    public void odd(IntConsumer printNumber) throws InterruptedException {
        
    	for(int i=0;i<=n;i++){
    		if(isOdd(i)){
    			sp2.acquire();
    			sp1.acquire();
    			printNumber.accept(i);
    			sp3.release();
    			sp4.release();
    		}
    	}
    	
    }
    
    private boolean isOdd(int num){
    	return num%2==0?false:true;
    }
}